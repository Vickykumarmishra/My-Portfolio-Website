{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/VICKY MISHRA/Desktop/My-Portfolio-Website/My-portfolio-website-using-React-js/myportfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"C:/Users/VICKY MISHRA/Desktop/My-Portfolio-Website/My-portfolio-website-using-React-js/myportfolio/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/VICKY MISHRA/Desktop/My-Portfolio-Website/My-portfolio-website-using-React-js/myportfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/VICKY MISHRA/Desktop/My-Portfolio-Website/My-portfolio-website-using-React-js/myportfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/VICKY MISHRA/Desktop/My-Portfolio-Website/My-portfolio-website-using-React-js/myportfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./Utils\";\nimport { deepExtend, getDistance, getDistances, itemFromArray } from \"../../Utils\";\nimport { Constants } from \"../../Core\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nexport var PolygonMaskInstance = /*#__PURE__*/function () {\n  function PolygonMaskInstance(container) {\n    _classCallCheck(this, PolygonMaskInstance);\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n  _createClass(PolygonMaskInstance, [{\n    key: \"initAsync\",\n    value: function () {\n      var _initAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n        var polygonMaskOptions;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n              polygonMaskOptions = this.options;\n              this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n              if (!polygonMaskOptions.enable) {\n                _context.next = 6;\n                break;\n              }\n              _context.next = 6;\n              return this.initRawData();\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initAsync(_x) {\n        return _initAsync.apply(this, arguments);\n      }\n      return initAsync;\n    }()\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _this = this;\n      var container = this.container;\n      var options = this.options;\n      if (!(options.enable && options.type !== \"none\")) {\n        return;\n      }\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n      this.redrawTimeout = window.setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _this.initRawData(true);\n            case 2:\n              container.particles.redraw();\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      })), 250);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      delete this.raw;\n      delete this.paths;\n    }\n  }, {\n    key: \"particlesInitialization\",\n    value: function particlesInitialization() {\n      var options = this.options;\n      if (options.enable && options.type === \"inline\" && (options.inline.arrangement === \"one-per-point\" || options.inline.arrangement === \"per-point\")) {\n        this.drawPoints();\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"particlePosition\",\n    value: function particlePosition(position) {\n      var _a, _b;\n      var options = this.options;\n      if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n        return;\n      }\n      return deepExtend({}, position ? position : this.randomPoint());\n    }\n  }, {\n    key: \"particleBounce\",\n    value: function particleBounce(particle, delta, direction) {\n      return this.polygonBounce(particle, delta, direction);\n    }\n  }, {\n    key: \"clickPositionValid\",\n    value: function clickPositionValid(position) {\n      var options = this.options;\n      return options.enable && options.type !== \"none\" && options.type !== \"inline\" && this.checkInsidePolygon(position);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      var _a;\n      if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n      var options = this.options;\n      var polygonDraw = options.draw;\n      if (!(options.enable && polygonDraw.enable)) {\n        return;\n      }\n      var rawData = this.raw;\n      var _iterator = _createForOfIteratorHelper(this.paths),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var path = _step.value;\n          var path2d = path.path2d;\n          var path2dSupported = this.path2DSupported;\n          if (!context) {\n            continue;\n          }\n          if (path2dSupported && path2d && this.offset) {\n            drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n          } else if (rawData) {\n            drawPolygonMask(context, rawData, polygonDraw.stroke);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"polygonBounce\",\n    value: function polygonBounce(particle, _delta, direction) {\n      var options = this.options;\n      if (!this.raw || !options.enable || direction !== \"top\") {\n        return false;\n      }\n      if (options.type === \"inside\" || options.type === \"outside\") {\n        var closest, dx, dy;\n        var pos = particle.getPosition(),\n          radius = particle.getRadius();\n        for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n          var pi = this.raw[i],\n            pj = this.raw[j];\n          closest = calcClosestPtOnSegment(pi, pj, pos);\n          var dist = getDistances(pos, closest);\n          var _ref2 = [dist.dx, dist.dy];\n          dx = _ref2[0];\n          dy = _ref2[1];\n          if (dist.distance < radius) {\n            segmentBounce(pi, pj, particle.velocity);\n            return true;\n          }\n        }\n        if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n          var factor = {\n            x: 1,\n            y: 1\n          };\n          if (particle.position.x >= closest.x) {\n            factor.x = -1;\n          }\n          if (particle.position.y >= closest.y) {\n            factor.y = -1;\n          }\n          particle.position.x = closest.x + radius * 2 * factor.x;\n          particle.position.y = closest.y + radius * 2 * factor.y;\n          particle.velocity.mult(-1);\n          return true;\n        }\n      } else if (options.type === \"inline\" && particle.initialPosition) {\n        var _dist = getDistance(particle.initialPosition, particle.getPosition());\n        if (_dist > this.polygonMaskMoveRadius) {\n          particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n          particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"checkInsidePolygon\",\n    value: function checkInsidePolygon(position) {\n      var _a, _b;\n      var container = this.container;\n      var options = this.options;\n      if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n        return true;\n      }\n      if (!this.raw) {\n        throw new Error(Constants.noPolygonFound);\n      }\n      var canvasSize = container.canvas.size;\n      var x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n      var y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n      var inside = false;\n      for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        var pi = this.raw[i];\n        var pj = this.raw[j];\n        var intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n      return options.type === \"inside\" ? inside : options.type === \"outside\" ? !inside : false;\n    }\n  }, {\n    key: \"parseSvgPath\",\n    value: function parseSvgPath(xml, force) {\n      var _a, _b, _c;\n      var forceDownload = force !== null && force !== void 0 ? force : false;\n      if (this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n      var container = this.container;\n      var options = this.options;\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(xml, \"image/svg+xml\");\n      var svg = doc.getElementsByTagName(\"svg\")[0];\n      var svgPaths = svg.getElementsByTagName(\"path\");\n      if (!svgPaths.length) {\n        svgPaths = doc.getElementsByTagName(\"path\");\n      }\n      this.paths = [];\n      for (var i = 0; i < svgPaths.length; i++) {\n        var path = svgPaths.item(i);\n        if (path) {\n          this.paths.push({\n            element: path,\n            length: path.getTotalLength()\n          });\n        }\n      }\n      var pxRatio = container.retina.pixelRatio;\n      var scale = options.scale / pxRatio;\n      this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n      this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n      var position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n        x: 50,\n        y: 50\n      };\n      this.offset = {\n        x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n        y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n      };\n      return parsePaths(this.paths, scale, this.offset);\n    }\n  }, {\n    key: \"downloadSvgPath\",\n    value: function () {\n      var _downloadSvgPath = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(svgUrl, force) {\n        var options, url, forceDownload, req;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              options = this.options;\n              url = svgUrl || options.url;\n              forceDownload = force !== null && force !== void 0 ? force : false;\n              if (!(!url || this.paths !== undefined && !forceDownload)) {\n                _context3.next = 5;\n                break;\n              }\n              return _context3.abrupt(\"return\", this.raw);\n            case 5:\n              _context3.next = 7;\n              return fetch(url);\n            case 7:\n              req = _context3.sent;\n              if (req.ok) {\n                _context3.next = 10;\n                break;\n              }\n              throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n            case 10:\n              _context3.t0 = this;\n              _context3.next = 13;\n              return req.text();\n            case 13:\n              _context3.t1 = _context3.sent;\n              _context3.t2 = force;\n              return _context3.abrupt(\"return\", _context3.t0.parseSvgPath.call(_context3.t0, _context3.t1, _context3.t2));\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function downloadSvgPath(_x2, _x3) {\n        return _downloadSvgPath.apply(this, arguments);\n      }\n      return downloadSvgPath;\n    }()\n  }, {\n    key: \"drawPoints\",\n    value: function drawPoints() {\n      if (!this.raw) {\n        return;\n      }\n      var _iterator2 = _createForOfIteratorHelper(this.raw),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          this.container.particles.addParticle({\n            x: item.x,\n            y: item.y\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"randomPoint\",\n    value: function randomPoint() {\n      var container = this.container;\n      var options = this.options;\n      var position;\n      if (options.type === \"inline\") {\n        switch (options.inline.arrangement) {\n          case \"random-point\":\n            position = this.getRandomPoint();\n            break;\n          case \"random-length\":\n            position = this.getRandomPointByLength();\n            break;\n          case \"equidistant\":\n            position = this.getEquidistantPointByIndex(container.particles.count);\n            break;\n          case \"one-per-point\":\n          case \"per-point\":\n          default:\n            position = this.getPointByIndex(container.particles.count);\n        }\n      } else {\n        position = {\n          x: Math.random() * container.canvas.size.width,\n          y: Math.random() * container.canvas.size.height\n        };\n      }\n      if (this.checkInsidePolygon(position)) {\n        return position;\n      } else {\n        return this.randomPoint();\n      }\n    }\n  }, {\n    key: \"getRandomPoint\",\n    value: function getRandomPoint() {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Constants.noPolygonDataLoaded);\n      }\n      var coords = itemFromArray(this.raw);\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"getRandomPointByLength\",\n    value: function getRandomPointByLength() {\n      var _a, _b, _c;\n      var options = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        throw new Error(Constants.noPolygonDataLoaded);\n      }\n      var path = itemFromArray(this.paths);\n      var distance = Math.floor(Math.random() * path.length) + 1;\n      var point = path.element.getPointAtLength(distance);\n      return {\n        x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n        y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n      };\n    }\n  }, {\n    key: \"getEquidistantPointByIndex\",\n    value: function getEquidistantPointByIndex(index) {\n      var _a, _b, _c, _d, _e, _f, _g;\n      var options = this.container.actualOptions;\n      var polygonMaskOptions = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Constants.noPolygonDataLoaded);\n      var offset = 0;\n      var point;\n      var totalLength = this.paths.reduce(function (tot, path) {\n        return tot + path.length;\n      }, 0);\n      var distance = totalLength / options.particles.number.value;\n      var _iterator3 = _createForOfIteratorHelper(this.paths),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var path = _step3.value;\n          var pathDistance = distance * index - offset;\n          if (pathDistance <= path.length) {\n            point = path.element.getPointAtLength(pathDistance);\n            break;\n          } else {\n            offset += path.length;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return {\n        x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n        y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n      };\n    }\n  }, {\n    key: \"getPointByIndex\",\n    value: function getPointByIndex(index) {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Constants.noPolygonDataLoaded);\n      }\n      var coords = this.raw[index % this.raw.length];\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"createPath2D\",\n    value: function createPath2D() {\n      var _this2 = this;\n      var _a, _b;\n      var options = this.options;\n      if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n      var _iterator4 = _createForOfIteratorHelper(this.paths),\n        _step4;\n      try {\n        var _loop = function _loop() {\n          var path = _step4.value;\n          var pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n          if (pathData) {\n            var path2d = new Path2D(pathData);\n            var matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n            var finalPath = new Path2D();\n            var transform = matrix.scale(options.scale);\n            if (finalPath.addPath) {\n              finalPath.addPath(path2d, transform);\n              path.path2d = finalPath;\n            } else {\n              delete path.path2d;\n            }\n          } else {\n            delete path.path2d;\n          }\n          if (path.path2d || !_this2.raw) {\n            return \"continue\";\n          }\n          path.path2d = new Path2D();\n          path.path2d.moveTo(_this2.raw[0].x, _this2.raw[0].y);\n          _this2.raw.forEach(function (pos, i) {\n            var _a;\n            if (i > 0) {\n              (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n            }\n          });\n          path.path2d.closePath();\n        };\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _ret = _loop();\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"initRawData\",\n    value: function () {\n      var _initRawData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(force) {\n        var options, data, svg, path, namespaces;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              options = this.options;\n              if (!options.url) {\n                _context4.next = 7;\n                break;\n              }\n              _context4.next = 4;\n              return this.downloadSvgPath(options.url, force);\n            case 4:\n              this.raw = _context4.sent;\n              _context4.next = 8;\n              break;\n            case 7:\n              if (options.data) {\n                data = options.data;\n                if (typeof data !== \"string\") {\n                  path = data.path instanceof Array ? data.path.map(function (t) {\n                    return \"<path d=\\\"\".concat(t, \"\\\" />\");\n                  }).join(\"\") : \"<path d=\\\"\".concat(data.path, \"\\\" />\");\n                  namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                  svg = \"<svg \".concat(namespaces, \" width=\\\"\").concat(data.size.width, \"\\\" height=\\\"\").concat(data.size.height, \"\\\">\").concat(path, \"</svg>\");\n                } else {\n                  svg = data;\n                }\n                this.raw = this.parseSvgPath(svg, force);\n              }\n            case 8:\n              this.createPath2D();\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function initRawData(_x4) {\n        return _initRawData.apply(this, arguments);\n      }\n      return initRawData;\n    }()\n  }]);\n  return PolygonMaskInstance;\n}();","map":{"version":3,"names":["calcClosestPtOnSegment","drawPolygonMask","drawPolygonMaskPath","parsePaths","segmentBounce","deepExtend","getDistance","getDistances","itemFromArray","Constants","PolygonMask","PolygonMaskInstance","container","dimension","height","width","path2DSupported","window","Path2D","options","polygonMaskMoveRadius","move","radius","retina","pixelRatio","load","polygon","polygonMaskOptions","enable","initRawData","type","redrawTimeout","clearTimeout","setTimeout","particles","redraw","raw","paths","inline","arrangement","drawPoints","position","_a","_b","length","randomPoint","particle","delta","direction","polygonBounce","checkInsidePolygon","context","polygonDraw","draw","rawData","path","path2d","path2dSupported","offset","stroke","_delta","closest","dx","dy","pos","getPosition","getRadius","i","j","pi","pj","dist","distance","velocity","undefined","factor","x","y","mult","initialPosition","Error","noPolygonFound","canvasSize","canvas","size","Math","random","inside","intersect","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","item","push","element","getTotalLength","pxRatio","scale","parseFloat","getAttribute","svgUrl","url","fetch","req","ok","text","parseSvgPath","addParticle","getRandomPoint","getRandomPointByLength","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","value","pathDistance","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","moveTo","forEach","lineTo","closePath","downloadSvgPath","data","Array","map","t","join","namespaces","createPath2D"],"sources":["C:/Users/VICKY MISHRA/Desktop/My-Portfolio-Website/My-portfolio-website-using-React-js/myportfolio/node_modules/tsparticles/esm/Plugins/PolygonMask/PolygonMaskInstance.js"],"sourcesContent":["import { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./Utils\";\nimport { deepExtend, getDistance, getDistances, itemFromArray } from \"../../Utils\";\nimport { Constants } from \"../../Core\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nexport class PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    async initAsync(options) {\n        this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n        const polygonMaskOptions = this.options;\n        this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n        if (polygonMaskOptions.enable) {\n            await this.initRawData();\n        }\n    }\n    resize() {\n        const container = this.container;\n        const options = this.options;\n        if (!(options.enable && options.type !== \"none\")) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(async () => {\n            await this.initRawData(true);\n            container.particles.redraw();\n        }, 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === \"inline\" &&\n            (options.inline.arrangement === \"one-per-point\" ||\n                options.inline.arrangement === \"per-point\")) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return deepExtend({}, position ? position : this.randomPoint());\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== \"none\" &&\n            options.type !== \"inline\" &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options;\n        const polygonDraw = options.draw;\n        if (!(options.enable && polygonDraw.enable)) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d;\n            const path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                drawPolygonMask(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    polygonBounce(particle, _delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== \"top\") {\n            return false;\n        }\n        if (options.type === \"inside\" || options.type === \"outside\") {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = calcClosestPtOnSegment(pi, pj, pos);\n                const dist = getDistances(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    segmentBounce(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === \"inline\" && particle.initialPosition) {\n            const dist = getDistance(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container;\n        const options = this.options;\n        if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size;\n        const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n        const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i];\n            const pj = this.raw[j];\n            const intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === \"inside\"\n            ? inside\n            : options.type === \"outside\"\n                ? !inside\n                : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container;\n        const options = this.options;\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(xml, \"image/svg+xml\");\n        const svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio;\n        const scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return parsePaths(this.paths, scale, this.offset);\n    }\n    async downloadSvgPath(svgUrl, force) {\n        const options = this.options;\n        const url = svgUrl || options.url;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (!url || (this.paths !== undefined && !forceDownload)) {\n            return this.raw;\n        }\n        const req = await fetch(url);\n        if (!req.ok) {\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n        return this.parseSvgPath(await req.text(), force);\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container;\n        const options = this.options;\n        let position;\n        if (options.type === \"inline\") {\n            switch (options.inline.arrangement) {\n                case \"random-point\":\n                    position = this.getRandomPoint();\n                    break;\n                case \"random-length\":\n                    position = this.getRandomPointByLength();\n                    break;\n                case \"equidistant\":\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case \"one-per-point\":\n                case \"per-point\":\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants.noPolygonDataLoaded);\n        }\n        const coords = itemFromArray(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Constants.noPolygonDataLoaded);\n        }\n        const path = itemFromArray(this.paths);\n        const distance = Math.floor(Math.random() * path.length) + 1;\n        const point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.actualOptions;\n        const polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Constants.noPolygonDataLoaded);\n        let offset = 0;\n        let point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n        const distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData);\n                const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n                const finalPath = new Path2D();\n                const transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    async initRawData(force) {\n        const options = this.options;\n        if (options.url) {\n            this.raw = await this.downloadSvgPath(options.url, force);\n        }\n        else if (options.data) {\n            const data = options.data;\n            let svg;\n            if (typeof data !== \"string\") {\n                const path = data.path instanceof Array\n                    ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                    : `<path d=\"${data.path}\" />`;\n                const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n            }\n            else {\n                svg = data;\n            }\n            this.raw = this.parseSvgPath(svg, force);\n        }\n        this.createPath2D();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/VICKY MISHRA/Desktop/My-Portfolio-Website/My-portfolio-website-using-React-js/myportfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/VICKY MISHRA/Desktop/My-Portfolio-Website/My-portfolio-website-using-React-js/myportfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { clamp, getDistance, getDistances, getRangeMax, getRangeValue, isInArray, isSsr } from \"../../Utils\";\nfunction applyDistance(particle) {\n  var initialPosition = particle.initialPosition;\n  var _getDistances = getDistances(initialPosition, particle.position),\n    dx = _getDistances.dx,\n    dy = _getDistances.dy;\n  var dxFixed = Math.abs(dx),\n    dyFixed = Math.abs(dy);\n  var hDistance = particle.retina.maxDistance.horizontal;\n  var vDistance = particle.retina.maxDistance.vertical;\n  if (!hDistance && !vDistance) {\n    return;\n  }\n  if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    }\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    var pos = particle.position,\n      vel = particle.velocity;\n    if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n      vel.x *= -Math.random();\n    }\n    if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n      vel.y *= -Math.random();\n    }\n  }\n}\nexport var ParticlesMover = /*#__PURE__*/function () {\n  function ParticlesMover(container) {\n    _classCallCheck(this, ParticlesMover);\n    this.container = container;\n  }\n  _createClass(ParticlesMover, [{\n    key: \"move\",\n    value: function move(particle, delta) {\n      if (particle.destroyed) {\n        return;\n      }\n      this.moveParticle(particle, delta);\n      this.moveParallax(particle);\n    }\n  }, {\n    key: \"moveParticle\",\n    value: function moveParticle(particle, delta) {\n      var _a, _b, _c;\n      var _d, _e;\n      var particleOptions = particle.options;\n      var moveOptions = particleOptions.move;\n      if (!moveOptions.enable) {\n        return;\n      }\n      var container = this.container,\n        slowFactor = this.getProximitySpeedFactor(particle),\n        baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : _d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio) * container.retina.reduceFactor,\n        moveDrift = (_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : _e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio,\n        maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio,\n        sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n        diffFactor = 2,\n        speedFactor = sizeFactor * slowFactor * (delta.factor || 1) / diffFactor,\n        moveSpeed = baseSpeed * speedFactor;\n      this.applyPath(particle, delta);\n      var gravityOptions = moveOptions.gravity;\n      var gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n      if (gravityOptions.enable && moveSpeed) {\n        particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n      }\n      if (moveDrift && moveSpeed) {\n        particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n      }\n      var decay = particle.moveDecay;\n      if (decay != 1) {\n        particle.velocity.multTo(decay);\n      }\n      var velocity = particle.velocity.mult(moveSpeed);\n      var maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n      if (gravityOptions.enable && gravityOptions.maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n        velocity.y = gravityFactor * maxSpeed;\n        if (moveSpeed) {\n          particle.velocity.y = velocity.y / moveSpeed;\n        }\n      }\n      var zIndexOptions = particle.options.zIndex,\n        zVelocityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.velocityRate);\n      if (moveOptions.spin.enable) {\n        this.spin(particle, moveSpeed);\n      } else {\n        if (zVelocityFactor != 1) {\n          velocity.multTo(zVelocityFactor);\n        }\n        particle.position.addTo(velocity);\n        if (moveOptions.vibrate) {\n          particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n          particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n        }\n      }\n      applyDistance(particle);\n    }\n  }, {\n    key: \"spin\",\n    value: function spin(particle, moveSpeed) {\n      var container = this.container;\n      if (!particle.spin) {\n        return;\n      }\n      var updateFunc = {\n        x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n        y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos\n      };\n      particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n      particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n      particle.spin.radius += particle.spin.acceleration;\n      var maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n      if (particle.spin.radius > maxCanvasSize / 2) {\n        particle.spin.radius = maxCanvasSize / 2;\n        particle.spin.acceleration *= -1;\n      } else if (particle.spin.radius < 0) {\n        particle.spin.radius = 0;\n        particle.spin.acceleration *= -1;\n      }\n      particle.spin.angle += moveSpeed / 100 * (1 - particle.spin.radius / maxCanvasSize);\n    }\n  }, {\n    key: \"applyPath\",\n    value: function applyPath(particle, delta) {\n      var particlesOptions = particle.options;\n      var pathOptions = particlesOptions.move.path;\n      var pathEnabled = pathOptions.enable;\n      if (!pathEnabled) {\n        return;\n      }\n      var container = this.container;\n      if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n      }\n      var path = container.pathGenerator.generate(particle);\n      particle.velocity.addTo(path);\n      if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n        particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n      }\n      particle.lastPathTime -= particle.pathDelay;\n    }\n  }, {\n    key: \"moveParallax\",\n    value: function moveParallax(particle) {\n      var container = this.container;\n      var options = container.actualOptions;\n      if (isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n        return;\n      }\n      var parallaxForce = options.interactivity.events.onHover.parallax.force;\n      var mousePos = container.interactivity.mouse.position;\n      if (!mousePos) {\n        return;\n      }\n      var canvasCenter = {\n        x: container.canvas.size.width / 2,\n        y: container.canvas.size.height / 2\n      };\n      var parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n      var factor = particle.getRadius() / parallaxForce;\n      var tmp = {\n        x: (mousePos.x - canvasCenter.x) * factor,\n        y: (mousePos.y - canvasCenter.y) * factor\n      };\n      particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n      particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n  }, {\n    key: \"getProximitySpeedFactor\",\n    value: function getProximitySpeedFactor(particle) {\n      var container = this.container;\n      var options = container.actualOptions;\n      var active = isInArray(\"slow\", options.interactivity.events.onHover.mode);\n      if (!active) {\n        return 1;\n      }\n      var mousePos = this.container.interactivity.mouse.position;\n      if (!mousePos) {\n        return 1;\n      }\n      var particlePos = particle.getPosition();\n      var dist = getDistance(mousePos, particlePos);\n      var radius = container.retina.slowModeRadius;\n      if (dist > radius) {\n        return 1;\n      }\n      var proximityFactor = dist / radius || 0;\n      var slowFactor = options.interactivity.modes.slow.factor;\n      return proximityFactor / slowFactor;\n    }\n  }]);\n  return ParticlesMover;\n}();","map":{"version":3,"names":["clamp","getDistance","getDistances","getRangeMax","getRangeValue","isInArray","isSsr","applyDistance","particle","initialPosition","position","dx","dy","dxFixed","Math","abs","dyFixed","hDistance","retina","maxDistance","horizontal","vDistance","vertical","misplaced","velocity","x","y","pos","vel","random","ParticlesMover","container","delta","destroyed","moveParticle","moveParallax","_a","_b","_c","_d","_e","particleOptions","options","moveOptions","move","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","speed","pixelRatio","reduceFactor","moveDrift","drift","maxSize","size","value","sizeFactor","getRadius","diffFactor","speedFactor","factor","applyPath","gravityOptions","gravity","gravityFactor","inverse","acceleration","decay","moveDecay","multTo","mult","maxSpeed","zIndexOptions","zIndex","zVelocityFactor","zIndexFactor","velocityRate","spin","addTo","vibrate","sin","cos","updateFunc","direction","center","radius","angle","maxCanvasSize","max","canvas","width","height","particlesOptions","pathOptions","path","pathEnabled","lastPathTime","pathDelay","pathGenerator","generate","actualOptions","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","canvasCenter","parallaxSmooth","smooth","tmp","offset","active","mode","particlePos","getPosition","dist","slowModeRadius","proximityFactor","modes","slow"],"sources":["C:/Users/VICKY MISHRA/Desktop/My-Portfolio-Website/My-portfolio-website-using-React-js/myportfolio/node_modules/tsparticles/esm/Core/Utils/ParticlesMover.js"],"sourcesContent":["import { clamp, getDistance, getDistances, getRangeMax, getRangeValue, isInArray, isSsr } from \"../../Utils\";\nfunction applyDistance(particle) {\n    const initialPosition = particle.initialPosition;\n    const { dx, dy } = getDistances(initialPosition, particle.position);\n    const dxFixed = Math.abs(dx), dyFixed = Math.abs(dy);\n    const hDistance = particle.retina.maxDistance.horizontal;\n    const vDistance = particle.retina.maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -Math.random();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -Math.random();\n        }\n    }\n}\nexport class ParticlesMover {\n    constructor(container) {\n        this.container = container;\n    }\n    move(particle, delta) {\n        if (particle.destroyed) {\n            return;\n        }\n        this.moveParticle(particle, delta);\n        this.moveParallax(particle);\n    }\n    moveParticle(particle, delta) {\n        var _a, _b, _c;\n        var _d, _e;\n        const particleOptions = particle.options;\n        const moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = this.container, slowFactor = this.getProximitySpeedFactor(particle), baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : (_d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio)) *\n            container.retina.reduceFactor, moveDrift = ((_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : (_e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio)), maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, diffFactor = 2, speedFactor = (sizeFactor * slowFactor * (delta.factor || 1)) / diffFactor, moveSpeed = baseSpeed * speedFactor;\n        this.applyPath(particle, delta);\n        const gravityOptions = moveOptions.gravity;\n        const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n        if (gravityOptions.enable && moveSpeed) {\n            particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n        }\n        if (moveDrift && moveSpeed) {\n            particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n        }\n        const decay = particle.moveDecay;\n        if (decay != 1) {\n            particle.velocity.multTo(decay);\n        }\n        const velocity = particle.velocity.mult(moveSpeed);\n        const maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n        if (gravityOptions.enable &&\n            gravityOptions.maxSpeed > 0 &&\n            ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n                (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n            velocity.y = gravityFactor * maxSpeed;\n            if (moveSpeed) {\n                particle.velocity.y = velocity.y / moveSpeed;\n            }\n        }\n        const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n        if (moveOptions.spin.enable) {\n            this.spin(particle, moveSpeed);\n        }\n        else {\n            if (zVelocityFactor != 1) {\n                velocity.multTo(zVelocityFactor);\n            }\n            particle.position.addTo(velocity);\n            if (moveOptions.vibrate) {\n                particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n                particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n            }\n        }\n        applyDistance(particle);\n    }\n    spin(particle, moveSpeed) {\n        const container = this.container;\n        if (!particle.spin) {\n            return;\n        }\n        const updateFunc = {\n            x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n            y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos,\n        };\n        particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n        particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n        particle.spin.radius += particle.spin.acceleration;\n        const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n        if (particle.spin.radius > maxCanvasSize / 2) {\n            particle.spin.radius = maxCanvasSize / 2;\n            particle.spin.acceleration *= -1;\n        }\n        else if (particle.spin.radius < 0) {\n            particle.spin.radius = 0;\n            particle.spin.acceleration *= -1;\n        }\n        particle.spin.angle += (moveSpeed / 100) * (1 - particle.spin.radius / maxCanvasSize);\n    }\n    applyPath(particle, delta) {\n        const particlesOptions = particle.options;\n        const pathOptions = particlesOptions.move.path;\n        const pathEnabled = pathOptions.enable;\n        if (!pathEnabled) {\n            return;\n        }\n        const container = this.container;\n        if (particle.lastPathTime <= particle.pathDelay) {\n            particle.lastPathTime += delta.value;\n            return;\n        }\n        const path = container.pathGenerator.generate(particle);\n        particle.velocity.addTo(path);\n        if (pathOptions.clamp) {\n            particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n            particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n        }\n        particle.lastPathTime -= particle.pathDelay;\n    }\n    moveParallax(particle) {\n        const container = this.container;\n        const options = container.actualOptions;\n        if (isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasCenter = {\n            x: container.canvas.size.width / 2,\n            y: container.canvas.size.height / 2,\n        };\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n        const factor = particle.getRadius() / parallaxForce;\n        const tmp = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        };\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n    getProximitySpeedFactor(particle) {\n        const container = this.container;\n        const options = container.actualOptions;\n        const active = isInArray(\"slow\", options.interactivity.events.onHover.mode);\n        if (!active) {\n            return 1;\n        }\n        const mousePos = this.container.interactivity.mouse.position;\n        if (!mousePos) {\n            return 1;\n        }\n        const particlePos = particle.getPosition();\n        const dist = getDistance(mousePos, particlePos);\n        const radius = container.retina.slowModeRadius;\n        if (dist > radius) {\n            return 1;\n        }\n        const proximityFactor = dist / radius || 0;\n        const slowFactor = options.interactivity.modes.slow.factor;\n        return proximityFactor / slowFactor;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Particle_engine;\nimport { Vector, Vector3d } from \"./Utils\";\nimport { alterHsl, clamp, colorToRgb, deepExtend, getDistance, getHslFromAnimation, getParticleBaseVelocity, getParticleDirectionAngle, getRangeMax, getRangeMin, getRangeValue, getValue, isInArray, itemFromArray, randomInRange, setRangeValue } from \"../Utils\";\nimport { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions\";\nimport { Shape } from \"../Options/Classes/Particles/Shape/Shape\";\nconst fixOutMode = data => {\n  if (isInArray(data.outMode, data.checkModes) || isInArray(data.outMode, data.checkModes)) {\n    if (data.coord > data.maxCoord - data.radius * 2) {\n      data.setCb(-data.radius);\n    } else if (data.coord < data.radius * 2) {\n      data.setCb(data.radius);\n    }\n  }\n};\nexport class Particle {\n  constructor(engine, id, container, position, overrideOptions, group) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    this.id = id;\n    this.container = container;\n    this.group = group;\n    _Particle_engine.set(this, void 0);\n    __classPrivateFieldSet(this, _Particle_engine, engine, \"f\");\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    const pxRatio = container.retina.pixelRatio;\n    const mainOptions = container.actualOptions;\n    const particlesOptions = new ParticlesOptions();\n    particlesOptions.load(mainOptions.particles);\n    const shapeType = particlesOptions.shape.type;\n    const reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n      const shapeOptions = new Shape();\n      shapeOptions.load(overrideOptions.shape);\n      if (this.shape) {\n        this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n      }\n    } else {\n      this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n    }\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    this.pathDelay = getValue(this.options.move.path.delay) * 1000;\n    const zIndexValue = getRangeValue(this.options.zIndex.value);\n    container.retina.initParticle(this);\n    const sizeOptions = this.options.size,\n      sizeRange = sizeOptions.value;\n    this.size = {\n      enable: sizeOptions.animation.enable,\n      value: getValue(sizeOptions) * container.retina.pixelRatio,\n      max: getRangeMax(sizeRange) * pxRatio,\n      min: getRangeMin(sizeRange) * pxRatio,\n      loops: 0,\n      maxLoops: sizeOptions.animation.count\n    };\n    const sizeAnimation = sizeOptions.animation;\n    if (sizeAnimation.enable) {\n      this.size.status = 0;\n      switch (sizeAnimation.startValue) {\n        case \"min\":\n          this.size.value = this.size.min;\n          this.size.status = 0;\n          break;\n        case \"random\":\n          this.size.value = randomInRange(this.size) * pxRatio;\n          this.size.status = Math.random() >= 0.5 ? 0 : 1;\n          break;\n        case \"max\":\n        default:\n          this.size.value = this.size.max;\n          this.size.status = 1;\n          break;\n      }\n      this.size.velocity = ((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n    this.direction = getParticleDirectionAngle(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n    this.position = this.calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    this.offset = Vector.origin;\n    const particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n    if (!drawer) {\n      drawer = __classPrivateFieldGet(this, _Particle_engine, \"f\").plugins.getShapeDrawer(this.shape);\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n    this.life = this.loadLife();\n    this.spawning = this.life.delay > 0;\n    if (this.options.move.spin.enable) {\n      const spinPos = (_h = this.options.move.spin.position) !== null && _h !== void 0 ? _h : {\n        x: 50,\n        y: 50\n      };\n      const spinCenter = {\n        x: spinPos.x / 100 * container.canvas.size.width,\n        y: spinPos.y / 100 * container.canvas.size.height\n      };\n      const pos = this.getPosition();\n      const distance = getDistance(pos, spinCenter);\n      this.spin = {\n        center: spinCenter,\n        direction: this.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n        angle: this.velocity.angle,\n        radius: distance,\n        acceleration: (_j = this.retina.spinAcceleration) !== null && _j !== void 0 ? _j : getRangeValue(this.options.move.spin.acceleration)\n      };\n    }\n    this.shadowColor = colorToRgb(this.options.shadow.color);\n    for (const updater of container.particles.updaters) {\n      if (updater.init) {\n        updater.init(this);\n      }\n    }\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleCreated) {\n        plugin.particleCreated(this);\n      }\n    }\n  }\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n  isInsideCanvas() {\n    const radius = this.getRadius();\n    const canvasSize = this.container.canvas.size;\n    return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n  }\n  draw(delta) {\n    const container = this.container;\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawParticlePlugin(plugin, this, delta);\n    }\n    container.canvas.drawParticle(this, delta);\n  }\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n  getRadius() {\n    var _a;\n    return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n  }\n  getMass() {\n    return this.getRadius() ** 2 * Math.PI / 2;\n  }\n  getFillColor() {\n    var _a, _b, _c;\n    const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n    if (color && this.roll && (this.backColor || this.roll.alter)) {\n      const rolled = Math.floor(((_c = (_b = this.roll) === null || _b === void 0 ? void 0 : _b.angle) !== null && _c !== void 0 ? _c : 0) / (Math.PI / 2)) % 2;\n      if (rolled) {\n        if (this.backColor) {\n          return this.backColor;\n        }\n        if (this.roll.alter) {\n          return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n        }\n      }\n    }\n    return color;\n  }\n  getStrokeColor() {\n    var _a, _b;\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n  destroy(override) {\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    if (this.unbreakable) {\n      return;\n    }\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n    if (override) {\n      return;\n    }\n    const destroyOptions = this.options.destroy;\n    if (destroyOptions.mode === \"split\") {\n      this.split();\n    }\n  }\n  reset() {\n    if (this.opacity) {\n      this.opacity.loops = 0;\n    }\n    this.size.loops = 0;\n  }\n  split() {\n    const splitOptions = this.options.destroy.split;\n    if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n      return;\n    }\n    const rate = getRangeValue(splitOptions.rate.value);\n    for (let i = 0; i < rate; i++) {\n      this.container.particles.addSplitParticle(this);\n    }\n  }\n  calcPosition(container, position, zIndex) {\n    let tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    var _a, _b, _c, _d, _e, _f;\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n      if (pluginPos !== undefined) {\n        return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n      }\n    }\n    const canvasSize = container.canvas.size;\n    const pos = Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n    const radius = this.getRadius();\n    const outModes = this.options.move.outModes,\n      fixHorizontal = outMode => {\n        fixOutMode({\n          outMode,\n          checkModes: [\"bounce\", \"bounce-horizontal\"],\n          coord: pos.x,\n          maxCoord: container.canvas.size.width,\n          setCb: value => pos.x += value,\n          radius\n        });\n      },\n      fixVertical = outMode => {\n        fixOutMode({\n          outMode,\n          checkModes: [\"bounce\", \"bounce-vertical\"],\n          coord: pos.y,\n          maxCoord: container.canvas.size.height,\n          setCb: value => pos.y += value,\n          radius\n        });\n      };\n    fixHorizontal((_c = outModes.left) !== null && _c !== void 0 ? _c : outModes.default);\n    fixHorizontal((_d = outModes.right) !== null && _d !== void 0 ? _d : outModes.default);\n    fixVertical((_e = outModes.top) !== null && _e !== void 0 ? _e : outModes.default);\n    fixVertical((_f = outModes.bottom) !== null && _f !== void 0 ? _f : outModes.default);\n    if (this.checkOverlap(pos, tryCount)) {\n      return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n    }\n    return pos;\n  }\n  checkOverlap(pos) {\n    let tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const collisionsOptions = this.options.collisions;\n    const radius = this.getRadius();\n    if (!collisionsOptions.enable) {\n      return false;\n    }\n    const overlapOptions = collisionsOptions.overlap;\n    if (overlapOptions.enable) {\n      return false;\n    }\n    const retries = overlapOptions.retries;\n    if (retries >= 0 && tryCount > retries) {\n      throw new Error(\"Particle is overlapping and can't be placed\");\n    }\n    let overlaps = false;\n    for (const particle of this.container.particles.array) {\n      if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n        overlaps = true;\n        break;\n      }\n    }\n    return overlaps;\n  }\n  calculateVelocity() {\n    const baseVelocity = getParticleBaseVelocity(this.direction);\n    const res = baseVelocity.copy();\n    const moveOptions = this.options.move;\n    const rad = Math.PI / 180 * moveOptions.angle.value;\n    const radOffset = Math.PI / 180 * moveOptions.angle.offset;\n    const range = {\n      left: radOffset - rad / 2,\n      right: radOffset + rad / 2\n    };\n    if (!moveOptions.straight) {\n      res.angle += randomInRange(setRangeValue(range.left, range.right));\n    }\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= Math.random();\n    }\n    return res;\n  }\n  loadShapeData(shapeOptions, reduceDuplicates) {\n    const shapeData = shapeOptions.options[this.shape];\n    if (shapeData) {\n      return deepExtend({}, shapeData instanceof Array ? itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n    }\n  }\n  loadLife() {\n    const container = this.container;\n    const particlesOptions = this.options;\n    const lifeOptions = particlesOptions.life;\n    const life = {\n      delay: container.retina.reduceFactor ? getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      delayTime: 0,\n      duration: container.retina.reduceFactor ? getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      time: 0,\n      count: particlesOptions.life.count\n    };\n    if (life.duration <= 0) {\n      life.duration = -1;\n    }\n    if (life.count <= 0) {\n      life.count = -1;\n    }\n    return life;\n  }\n}\n_Particle_engine = new WeakMap();","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Particle_engine","Vector","Vector3d","alterHsl","clamp","colorToRgb","deepExtend","getDistance","getHslFromAnimation","getParticleBaseVelocity","getParticleDirectionAngle","getRangeMax","getRangeMin","getRangeValue","getValue","isInArray","itemFromArray","randomInRange","setRangeValue","ParticlesOptions","Shape","fixOutMode","data","outMode","checkModes","coord","maxCoord","radius","setCb","Particle","constructor","engine","id","container","position","overrideOptions","group","_a","_b","_c","_d","_e","_f","_g","_h","_j","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","retina","maxDistance","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","overrideShapeType","shapeOptions","shapeData","loadShapeData","undefined","options","pathDelay","move","path","delay","zIndexValue","zIndex","initParticle","sizeOptions","size","sizeRange","enable","animation","max","min","loops","maxLoops","count","sizeAnimation","status","startValue","Math","random","velocity","sizeAnimationSpeed","reduceFactor","sync","direction","bubble","inRange","initialVelocity","calculateVelocity","copy","moveDecay","decay","calcPosition","zLayers","initialPosition","offset","origin","needsSort","lastZIndex","z","zIndexFactor","sides","drawer","drawers","plugins","getShapeDrawer","loadShape","sideCountFunc","getSidesCount","life","loadLife","spawning","spin","spinPos","x","y","spinCenter","canvas","width","height","pos","getPosition","distance","center","angle","acceleration","spinAcceleration","shadowColor","shadow","color","updater","updaters","init","particleInit","plugin","particleCreated","isVisible","isInsideCanvas","getRadius","canvasSize","draw","delta","drawParticlePlugin","drawParticle","getMass","PI","getFillColor","roll","backColor","alter","rolled","floor","getStrokeColor","strokeColor","destroy","override","particleDestroyed","destroyOptions","mode","split","reset","opacity","splitOptions","rate","i","addSplitParticle","tryCount","pluginPos","particlePosition","create","outModes","fixHorizontal","fixVertical","left","default","right","top","bottom","checkOverlap","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","particle","array","baseVelocity","res","moveOptions","rad","radOffset","range","straight","speed","length","lifeOptions","delayTime","duration","time","WeakMap"],"sources":["C:/Users/VICKY MISHRA/Desktop/My-Portfolio-Website/My-portfolio-website-using-React-js/myportfolio/node_modules/tsparticles/esm/Core/Particle.js"],"sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Particle_engine;\nimport { Vector, Vector3d } from \"./Utils\";\nimport { alterHsl, clamp, colorToRgb, deepExtend, getDistance, getHslFromAnimation, getParticleBaseVelocity, getParticleDirectionAngle, getRangeMax, getRangeMin, getRangeValue, getValue, isInArray, itemFromArray, randomInRange, setRangeValue, } from \"../Utils\";\nimport { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions\";\nimport { Shape } from \"../Options/Classes/Particles/Shape/Shape\";\nconst fixOutMode = (data) => {\n    if (isInArray(data.outMode, data.checkModes) || isInArray(data.outMode, data.checkModes)) {\n        if (data.coord > data.maxCoord - data.radius * 2) {\n            data.setCb(-data.radius);\n        }\n        else if (data.coord < data.radius * 2) {\n            data.setCb(data.radius);\n        }\n    }\n};\nexport class Particle {\n    constructor(engine, id, container, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        this.id = id;\n        this.container = container;\n        this.group = group;\n        _Particle_engine.set(this, void 0);\n        __classPrivateFieldSet(this, _Particle_engine, engine, \"f\");\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        const pxRatio = container.retina.pixelRatio;\n        const mainOptions = container.actualOptions;\n        const particlesOptions = new ParticlesOptions();\n        particlesOptions.load(mainOptions.particles);\n        const shapeType = particlesOptions.shape.type;\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n            }\n        }\n        else {\n            this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        this.pathDelay = getValue(this.options.move.path.delay) * 1000;\n        const zIndexValue = getRangeValue(this.options.zIndex.value);\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size, sizeRange = sizeOptions.value;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: getValue(sizeOptions) * container.retina.pixelRatio,\n            max: getRangeMax(sizeRange) * pxRatio,\n            min: getRangeMin(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: sizeOptions.animation.count,\n        };\n        const sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = 0;\n            switch (sizeAnimation.startValue) {\n                case \"min\":\n                    this.size.value = this.size.min;\n                    this.size.status = 0;\n                    break;\n                case \"random\":\n                    this.size.value = randomInRange(this.size) * pxRatio;\n                    this.size.status = Math.random() >= 0.5 ? 0 : 1;\n                    break;\n                case \"max\":\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = 1;\n                    break;\n            }\n            this.size.velocity =\n                (((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.direction = getParticleDirectionAngle(this.options.move.direction);\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n        this.position = this.calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        this.offset = Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = __classPrivateFieldGet(this, _Particle_engine, \"f\").plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.life = this.loadLife();\n        this.spawning = this.life.delay > 0;\n        if (this.options.move.spin.enable) {\n            const spinPos = (_h = this.options.move.spin.position) !== null && _h !== void 0 ? _h : { x: 50, y: 50 };\n            const spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            };\n            const pos = this.getPosition();\n            const distance = getDistance(pos, spinCenter);\n            this.spin = {\n                center: spinCenter,\n                direction: this.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: this.velocity.angle,\n                radius: distance,\n                acceleration: (_j = this.retina.spinAcceleration) !== null && _j !== void 0 ? _j : getRangeValue(this.options.move.spin.acceleration),\n            };\n        }\n        this.shadowColor = colorToRgb(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            if (updater.init) {\n                updater.init(this);\n            }\n        }\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleCreated) {\n                plugin.particleCreated(this);\n            }\n        }\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius();\n        const canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        var _a;\n        return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getFillColor() {\n        var _a, _b, _c;\n        const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n        if (color && this.roll && (this.backColor || this.roll.alter)) {\n            const rolled = Math.floor(((_c = (_b = this.roll) === null || _b === void 0 ? void 0 : _b.angle) !== null && _c !== void 0 ? _c : 0) / (Math.PI / 2)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                if (this.roll.alter) {\n                    return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n                }\n            }\n        }\n        return color;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === \"split\") {\n            this.split();\n        }\n    }\n    reset() {\n        if (this.opacity) {\n            this.opacity.loops = 0;\n        }\n        this.size.loops = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = getRangeValue(splitOptions.rate.value);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d, _e, _f;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size;\n        const pos = Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n        const radius = this.getRadius();\n        const outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-horizontal\"],\n                coord: pos.x,\n                maxCoord: container.canvas.size.width,\n                setCb: (value) => (pos.x += value),\n                radius,\n            });\n        }, fixVertical = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-vertical\"],\n                coord: pos.y,\n                maxCoord: container.canvas.size.height,\n                setCb: (value) => (pos.y += value),\n                radius,\n            });\n        };\n        fixHorizontal((_c = outModes.left) !== null && _c !== void 0 ? _c : outModes.default);\n        fixHorizontal((_d = outModes.right) !== null && _d !== void 0 ? _d : outModes.default);\n        fixVertical((_e = outModes.top) !== null && _e !== void 0 ? _e : outModes.default);\n        fixVertical((_f = outModes.bottom) !== null && _f !== void 0 ? _f : outModes.default);\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions;\n        const radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    calculateVelocity() {\n        const baseVelocity = getParticleBaseVelocity(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        const rad = (Math.PI / 180) * moveOptions.angle.value;\n        const radOffset = (Math.PI / 180) * moveOptions.angle.offset;\n        const range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += randomInRange(setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return deepExtend({}, shapeData instanceof Array ? itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n    }\n    loadLife() {\n        const container = this.container;\n        const particlesOptions = this.options;\n        const lifeOptions = particlesOptions.life;\n        const life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: particlesOptions.life.count,\n        };\n        if (life.duration <= 0) {\n            life.duration = -1;\n        }\n        if (life.count <= 0) {\n            life.count = -1;\n        }\n        return life;\n    }\n}\n_Particle_engine = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}